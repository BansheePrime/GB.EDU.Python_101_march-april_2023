"""
Задание 3.

Создайте собственный класс-исключение,
который должен проверять содержимое списка на наличие только чисел.

Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять
список только числами.

Класс-исключение должен контролировать типы данных элементов списка.

3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами. 
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. 
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop». 
При этом скрипт завершается, сформированный список с числами выводится на экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. 
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента. 
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. 
При этом работа скрипта не должна завершаться.
"""
class AcceptOnlyNumbersError(Exception):
    def __init__(self, message_error="Принимаются только числа."):
        self.message_error = message_error
        super().__init__(self.message_error)


def my_list():
    numbers_list = []
    while True:
        try:
            my_value = input("Введите число, или 'end' для завершения: ")
            if my_value == "end":
                break
            if not my_value.isdigit():
                raise AcceptOnlyNumbersError
            numbers_list.append(int(my_value))
        except AcceptOnlyNumbersError as my_error:
            print(my_error)
    return numbers_list


print(my_list())
